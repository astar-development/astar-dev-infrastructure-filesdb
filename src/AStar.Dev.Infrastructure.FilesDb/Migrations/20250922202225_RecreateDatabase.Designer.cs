// <auto-generated />
using System;
using System.Collections.Generic;
using AStar.Dev.Infrastructure.FilesDb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AStar.Dev.Infrastructure.FilesDb.Migrations
{
    [DbContext(typeof(FilesContext))]
    [Migration("20250922202225_RecreateDatabase")]
    partial class RecreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("files")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.DeletionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("HardDeletePending")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("HardDeletePending");

                    b.Property<DateTimeOffset?>("SoftDeletePending")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("SoftDeletePending");

                    b.Property<DateTimeOffset?>("SoftDeleted")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("SoftDeleted");

                    b.HasKey("Id");

                    b.ToTable("DeletionStatus", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.DuplicatesDetails", b =>
                {
                    b.Property<DateTime>("DetailsLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileAccessDetailId")
                        .HasColumnType("int");

                    b.Property<string>("FileHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("HardDeletePending")
                        .HasColumnType("bit");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Instances")
                        .HasColumnType("int");

                    b.Property<bool>("IsImage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastViewed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MoveRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("SoftDeletePending")
                        .HasColumnType("bit");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_DuplicatesDetails", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("EventOccurredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FileCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FileLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Type", "AStar.Dev.Infrastructure.FilesDb.Models.Event.Type#EventType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EventName");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("EventType");
                        });

                    b.HasKey("Id");

                    b.ToTable("Event", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileAccessDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DetailsLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastViewed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MoveRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FileAccessDetail", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Celebrity")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeInSearch")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FileClassification", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DeletionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("FileAccessDetailId")
                        .HasColumnType("int");

                    b.Property<string>("FileHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsImage")
                        .HasColumnType("bit");

                    b.ComplexProperty<Dictionary<string, object>>("DirectoryName", "AStar.Dev.Infrastructure.FilesDb.Models.FileDetail.DirectoryName#DirectoryName", b1 =>
                        {
                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("DirectoryName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FileName", "AStar.Dev.Infrastructure.FilesDb.Models.FileDetail.FileName#FileName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("FileName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ImageDetail", "AStar.Dev.Infrastructure.FilesDb.Models.FileDetail.ImageDetail#ImageDetail", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int?>("Height")
                                .HasColumnType("int")
                                .HasColumnName("ImageHeight");

                            b1.Property<int?>("Width")
                                .HasColumnType("int")
                                .HasColumnName("ImageWidth");
                        });

                    b.HasKey("Id");

                    b.HasIndex("DeletionStatusId");

                    b.HasIndex("FileAccessDetailId");

                    b.HasIndex("FileHandle")
                        .IsUnique();

                    b.HasIndex("FileSize");

                    b.HasIndex("IsImage", "FileSize")
                        .HasDatabaseName("IX_FileDetail_DuplicateImages");

                    b.ToTable("FileDetail", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileNamePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FileClassificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeInSearch")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FileClassificationId");

                    b.ToTable("FileNamePart", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.ModelToIgnore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("ModelToIgnore", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.TagToIgnore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IgnoreImage")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("TagToIgnore", "files");
                });

            modelBuilder.Entity("FileClassificationFileDetail", b =>
                {
                    b.Property<int>("FileClassificationsId")
                        .HasColumnType("int");

                    b.Property<int>("FileDetailsId")
                        .HasColumnType("int");

                    b.HasKey("FileClassificationsId", "FileDetailsId");

                    b.HasIndex("FileDetailsId");

                    b.ToTable("FileClassificationFileDetail", "files");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileDetail", b =>
                {
                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.DeletionStatus", "DeletionStatus")
                        .WithMany()
                        .HasForeignKey("DeletionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.FileAccessDetail", "FileAccessDetail")
                        .WithMany()
                        .HasForeignKey("FileAccessDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeletionStatus");

                    b.Navigation("FileAccessDetail");
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileNamePart", b =>
                {
                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.FileClassification", null)
                        .WithMany("FileNameParts")
                        .HasForeignKey("FileClassificationId");
                });

            modelBuilder.Entity("FileClassificationFileDetail", b =>
                {
                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.FileClassification", null)
                        .WithMany()
                        .HasForeignKey("FileClassificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AStar.Dev.Infrastructure.FilesDb.Models.FileDetail", null)
                        .WithMany()
                        .HasForeignKey("FileDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AStar.Dev.Infrastructure.FilesDb.Models.FileClassification", b =>
                {
                    b.Navigation("FileNameParts");
                });
#pragma warning restore 612, 618
        }
    }
}
